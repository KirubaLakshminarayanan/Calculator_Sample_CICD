pipeline {
    agent any
    environment {
        SOAPUI_HOME = "C:\\Program Files\\SmartBear\\SoapUI-5.7.2"
        soapuiProjectPath = "C:\\Users\\LKiruba\\Desktop\\Calculator_Soapui_CICD\\Calculator-Soap-soapui-project.xml"
        soapuiReportsPath = "C:\\Reports\\CICD_SOAPUI\\XML"
        htmlReportsPath = "C:\\Reports\\CICD_SOAPUI\\HTML"
        logFolderPath = "C:\\Reports\\CICD_SOAPUI\\Log"
        pythonScriptPath = "C:\\Users\\LKiruba\\Desktop\\Calculator_Soapui_CICD\\convert_xml_to_html.py"
        timestamp = new Date().format("yyyyMMdd_HHmmss")
        buildNumber = "${env.BUILD_NUMBER}"
        jobName = "${env.JOB_NAME}"
        logFilePath = "${env.logFolderPath}\\build_${env.timestamp}.log"
    }
    stages {
        stage('Clone Repository') {
            steps {
                script {
                    try {
                        git 'https://github.com/KirubaLakshminarayanan/Calculator_Sample_CICD.git'
                        bat "echo Repository cloned successfully. >> \"${env.logFilePath}\""
                    } catch (Exception e) {
                        bat "echo Failed to clone repository: ${e.message} >> \"${env.logFilePath}\""
                        throw e
                    }
                }
            }
        }
        stage('Prepare Log Directory') {
            steps {
                script {
                    try {
                        bat "if not exist \"${env.logFolderPath}\" mkdir \"${env.logFolderPath}\""
                        bat "echo Log directory prepared. >> \"${env.logFilePath}\""
                    } catch (Exception e) {
                        bat "echo Failed to prepare log directory: ${e.message} >> \"${env.logFilePath}\""
                        throw e
                    }
                }
            }
        }
        stage('Run SoapUI Tests') {
            steps {
                script {
                    try {
                        bat "if not exist \"${env.soapuiReportsPath}\" mkdir \"${env.soapuiReportsPath}\""
                        bat "echo Running SoapUI tests... >> \"${env.logFilePath}\""
                        bat "\"${env.SOAPUI_HOME}\\bin\\testrunner.bat\" -r -j -f\"${env.soapuiReportsPath}\" \"${env.soapuiProjectPath}\" >> \"${env.logFilePath}\" 2>&1"
                        bat "echo SoapUI tests completed. >> \"${env.logFilePath}\""
                        bat "dir \"${env.soapuiReportsPath}\" >> \"${env.logFilePath}\""
                    } catch (Exception e) {
                        bat "echo Failed to run SoapUI tests: ${e.message} >> \"${env.logFilePath}\""
                        throw e
                    }
                }
            }
        }
        stage('Archive XML Reports') {
            steps {
                script {
                    try {
                        archiveArtifacts artifacts: "${env.soapuiReportsPath}/**", allowEmptyArchive: true
                        bat "echo XML reports archived successfully. >> \"${env.logFilePath}\""
                    } catch (Exception e) {
                        bat "echo Failed to archive XML reports: ${e.message} >> \"${env.logFilePath}\""
                        throw e
                    }
                }
            }
        }
        stage('Convert XML to HTML') {
            steps {
                script {
                    try {
                        bat "if not exist \"${env.htmlReportsPath}\" mkdir \"${env.htmlReportsPath}\""
                        bat "echo Converting XML to HTML... >> \"${env.logFilePath}\""
                        bat "python \"${env.pythonScriptPath}\" \"${env.soapuiReportsPath}\" \"${env.htmlReportsPath}\" \"${env.timestamp}\" \"${env.buildNumber}\" \"${env.jobName}\" >> \"${env.logFilePath}\" 2>&1"
                        bat "echo Conversion from XML to HTML completed. >> \"${env.logFilePath}\""
                        bat "dir \"${env.htmlReportsPath}\" >> \"${env.logFilePath}\""
                    } catch (Exception e) {
                        bat "echo Failed to convert XML to HTML: ${e.message} >> \"${env.logFilePath}\""
                        throw e
                    }
                }
            }
        }
        stage('Archive HTML Reports') {
            steps {
                script {
                    try {
                        archiveArtifacts artifacts: "${env.htmlReportsPath}/**", allowEmptyArchive: true
                        bat "echo HTML reports archived successfully. >> \"${env.logFilePath}\""
                    } catch (Exception e) {
                        bat "echo Failed to archive HTML reports: ${e.message} >> \"${env.logFilePath}\""
                        throw e
                    }
                }
            }
        }
    }
}
